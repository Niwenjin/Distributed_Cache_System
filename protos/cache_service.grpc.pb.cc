// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cache_service.proto

#include "cache_service.pb.h"
#include "cache_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* CacheService_method_names[] = {
  "/CacheService/Get",
  "/CacheService/Set",
  "/CacheService/Delete",
};

std::unique_ptr< CacheService::Stub> CacheService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CacheService::Stub> stub(new CacheService::Stub(channel, options));
  return stub;
}

CacheService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Get_(CacheService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Set_(CacheService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(CacheService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CacheService::Stub::Get(::grpc::ClientContext* context, const ::GetRequest& request, ::GetReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GetRequest, ::GetReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_, context, request, response);
}

void CacheService::Stub::async::Get(::grpc::ClientContext* context, const ::GetRequest* request, ::GetReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GetRequest, ::GetReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void CacheService::Stub::async::Get(::grpc::ClientContext* context, const ::GetRequest* request, ::GetReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GetReply>* CacheService::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GetReply, ::GetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GetReply>* CacheService::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::GetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CacheService::Stub::Set(::grpc::ClientContext* context, const ::SetRequest& request, ::SetReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::SetRequest, ::SetReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Set_, context, request, response);
}

void CacheService::Stub::async::Set(::grpc::ClientContext* context, const ::SetRequest* request, ::SetReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::SetRequest, ::SetReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, std::move(f));
}

void CacheService::Stub::async::Set(::grpc::ClientContext* context, const ::SetRequest* request, ::SetReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SetReply>* CacheService::Stub::PrepareAsyncSetRaw(::grpc::ClientContext* context, const ::SetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::SetReply, ::SetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Set_, context, request);
}

::grpc::ClientAsyncResponseReader< ::SetReply>* CacheService::Stub::AsyncSetRaw(::grpc::ClientContext* context, const ::SetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CacheService::Stub::Delete(::grpc::ClientContext* context, const ::DelRequest& request, ::DelReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::DelRequest, ::DelReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void CacheService::Stub::async::Delete(::grpc::ClientContext* context, const ::DelRequest* request, ::DelReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::DelRequest, ::DelReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void CacheService::Stub::async::Delete(::grpc::ClientContext* context, const ::DelRequest* request, ::DelReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DelReply>* CacheService::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::DelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::DelReply, ::DelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Delete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::DelReply>* CacheService::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::DelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

CacheService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CacheService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CacheService::Service, ::GetRequest, ::GetReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CacheService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GetRequest* req,
             ::GetReply* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CacheService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CacheService::Service, ::SetRequest, ::SetReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CacheService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::SetRequest* req,
             ::SetReply* resp) {
               return service->Set(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CacheService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CacheService::Service, ::DelRequest, ::DelReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CacheService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::DelRequest* req,
             ::DelReply* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
}

CacheService::Service::~Service() {
}

::grpc::Status CacheService::Service::Get(::grpc::ServerContext* context, const ::GetRequest* request, ::GetReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CacheService::Service::Set(::grpc::ServerContext* context, const ::SetRequest* request, ::SetReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CacheService::Service::Delete(::grpc::ServerContext* context, const ::DelRequest* request, ::DelReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


